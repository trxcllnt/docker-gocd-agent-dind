# Copyright 2020 ThoughtWorks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

###############################################################################################
# This file is autogenerated by the repository at https://github.com/gocd/gocd.
# Please file any issues or PRs at https://github.com/gocd/gocd
###############################################################################################

FROM alpine:latest as gocd-agent-unzip

ARG UID=1000

RUN \
  apk --no-cache upgrade && \
  apk add --no-cache curl && \
  curl --fail --location --silent --show-error "https://download.gocd.org/binaries/20.10.0-12356/generic/go-agent-20.10.0-12356.zip" > /tmp/go-agent-20.10.0-12356.zip

RUN unzip /tmp/go-agent-20.10.0-12356.zip -d /
RUN mv /go-agent-20.10.0 /go-agent && chown -R ${UID}:0 /go-agent && chmod -R g=u /go-agent

FROM adoptopenjdk:15-jre

# Recreate the `docker:dind` image on top of the multiarch AdoptOpenJDK Ubuntu image.
# Combine all the RUN commands into a single layer to save space.

LABEL gocd.version="20.10.0" \
  description="GoCD agent based on docker version dind" \
  maintainer="ThoughtWorks, Inc. <support@thoughtworks.com>" \
  url="https://www.gocd.org" \
  gocd.full.version="20.10.0-12356" \
  gocd.git.sha="b16b6bc3f7ad3bb39e465ff2168d1cc66c95b4d5"

# FROM docker:19.03 (https://github.com/docker-library/docker/blob/a7534626601bce99a23f0496a3f659616522ed22/19.03/Dockerfile)
# FROM docker:dind (https://github.com/docker-library/docker/blob/a7534626601bce99a23f0496a3f659616522ed22/19.03/dind/Dockerfile)

ENV DOCKER_VERSION 19.03.14

# https://github.com/docker-library/docker/pull/166
#   dockerd-entrypoint.sh uses DOCKER_TLS_CERTDIR for auto-generating TLS certificates
#   docker-entrypoint.sh uses DOCKER_TLS_CERTDIR for auto-setting DOCKER_TLS_VERIFY and DOCKER_CERT_PATH
# (For this to work, at least the "client" subdirectory of this path needs to be shared between the client and server containers via a volume, "docker cp", or other means of data sharing.)
ENV DOCKER_TLS_CERTDIR=/certs

# force encoding
ENV LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8
ENV GO_JAVA_HOME="/gocd-jre"

ARG UID=1000

ADD docker-entrypoint.sh /
ADD https://raw.githubusercontent.com/docker/docker/ed89041433a031cafc0a0f19cfe573c31688d377/hack/dind /usr/local/bin/dind
ADD https://raw.githubusercontent.com/docker-library/docker/a7534626601bce99a23f0496a3f659616522ed22/19.03/modprobe.sh /usr/local/bin/modprobe
ADD https://raw.githubusercontent.com/docker-library/docker/a7534626601bce99a23f0496a3f659616522ed22/19.03/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
ADD https://raw.githubusercontent.com/docker-library/docker/a7534626601bce99a23f0496a3f659616522ed22/19.03/dind/dockerd-entrypoint.sh /usr/local/bin/dockerd-entrypoint.sh

RUN set -eux; \
    export DEBIAN_FRONTEND=noninteractive \
 && apt update \
 && apt install -y \
    apt-utils apt-transport-https software-properties-common \
 && add-apt-repository -y --update ppa:git-core/ppa \
 && apt install -y \
    ca-certificates openssh-client wget curl iptables \
    sudo sasl2-bin libcurl4-nss-dev git mercurial subversion procps \
 #  pigz: https://github.com/moby/moby/pull/35697 (faster gzip implementation)
    pigz \
 && add-apt-repository -y --remove ppa:git-core/ppa \
 && apt remove -y \
    apt-utils apt-transport-https software-properties-common \
 && apt autoremove -y \
 && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*; \
 # install docker
    arch="$(uname --m)"; \
    case "$arch" in \
        # amd64
        x86_64) dockerArch='x86_64'; tiniArch='amd64'; ;; \
        # arm32v6
        armhf) dockerArch='armel'; tiniArch='armel'; ;; \
        # arm32v7
        armv7) dockerArch='armhf'; tiniArch='armhf'; ;; \
        # arm64v8
        aarch64) dockerArch='aarch64'; tiniArch='arm64'; ;; \
        *) echo >&2 "error: unsupported architecture ($arch)"; exit 1 ;;\
    esac; \
    \
    if ! wget -O docker.tgz "https://download.docker.com/linux/static/stable/${dockerArch}/docker-${DOCKER_VERSION}.tgz"; then \
        echo >&2 "error: failed to download 'docker-${DOCKER_VERSION}' from 'stable' for '${dockerArch}'"; \
        exit 1; \
    fi; \
    \
    tar --extract \
        --file docker.tgz \
        --strip-components 1 \
        --directory /usr/local/bin/ \
    ; \
    rm docker.tgz; \
    \
    dockerd --version; \
    docker --version; \
    # set up nsswitch.conf for Go's "netgo" implementation (which Docker explicitly uses)
    # - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
    # - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
    # - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
    if ! -e /etc/nsswitch.conf; then echo 'hosts: files dns' > /etc/nsswitch.conf; fi; \
    # also, ensure the directory pre-exists and has wide enough permissions for "dockerd-entrypoint.sh" to create subdirectories, even when run in "rootless" mode
    mkdir -p /certs /certs/client && chmod 1777 /certs /certs/client; \
    # (doing both /certs and /certs/client so that if Docker does a "copy-up" into a volume defined on /certs/client, it will "do the right thing" by default in a way that still works for rootless users)
    # set up subuid/subgid so that "--userns-remap=default" works out-of-the-box
    groupadd --system dockremap; \
    useradd --system --gid dockremap dockremap; \
    echo 'dockremap:165536:65536' >> /etc/subuid; \
    echo 'dockremap:165536:65536' >> /etc/subgid; \
    chmod +x /usr/local/bin/dind \
             /usr/local/bin/modprobe \
             /usr/local/bin/docker-entrypoint.sh \
             /usr/local/bin/dockerd-entrypoint.sh \
 # download tini for the target architecture
 && mkdir -p /usr/local/sbin \
 && curl -LfsS https://github.com/krallin/tini/releases/download/v0.19.0/tini-static-${tiniArch} > /usr/local/sbin/tini \
 # add mode and permissions for tini
 && chmod 0755 /usr/local/sbin/tini \
 && chown root:root /usr/local/sbin/tini \
 # add our user and group first to make sure their IDs get assigned consistently,
 # regardless of whatever dependencies get added
 # add user to root group for gocd to work on openshift
 && useradd --uid ${UID} --shell /bin/bash --gid root go \
 && mkdir -p /go-agent /docker-entrypoint.d /go /godata \
 && chown -R go:root /docker-entrypoint.d /go /godata /docker-entrypoint.sh \
 && chmod -R g=u /docker-entrypoint.d /go /godata /docker-entrypoint.sh \
 # when the base image was alpine, the JRE was installed at /gocd-jre.
 # symlink AdoptOpenJDK's JAVA_HOME to /gocd-jre for backwards-compat.
 && ln -s "${JAVA_HOME}" "${GO_JAVA_HOME}"

VOLUME /var/lib/docker
EXPOSE 2375 2376

# install GoCD Agent
COPY --from=gocd-agent-unzip /go-agent /go-agent
# ensure that logs are printed to console output
COPY --chown=go:root agent-bootstrapper-logback-include.xml \
                     agent-launcher-logback-include.xml \
                     agent-logback-include.xml \
                     /go-agent/config/
COPY --chown=root:root dockerd-sudo /etc/sudoers.d/dockerd-sudo
COPY --chown=root:root run-docker-daemon.sh /

ENTRYPOINT ["/docker-entrypoint.sh"]

USER go
